[package]
name = "envman"
version = "0.0.14"
authors = ["Azriel Hoh <azriel91@gmail.com>"]
edition = "2021"
description = "Peace framework web application lifecycle example"
repository = "https://github.com/azriel91/peace"
license = "MIT OR Apache-2.0"
publish = false

[[bin]]
name = "envman"
test = false

[lib]
doctest = false
test = false
crate-type = ["cdylib", "rlib"]

[dependencies]
aws-config = { version = "1.5.15", optional = true }
aws-sdk-iam = { version = "1.59.0", optional = true }
aws-sdk-s3 = { version = "1.71.0", optional = true }
aws-smithy-types = { version = "1.2.12", optional = true } # used to reference error type, otherwise not recommended for direct usage
base64 = { version = "0.22.1", optional = true }
cfg-if = "1.0.0"
chrono = { version = "0.4.39", default-features = false, features = ["clock", "serde"], optional = true }
derivative = { version = "2.2.0", optional = true }
futures = { version = "0.3.31", optional = true }
md5-rs = { version = "0.1.5", optional = true }  # WASM compatible, and reads bytes as stream
peace = { path = "../..", default-features = false }
peace_items = { path = "../../items", features = ["file_download"] }
semver = { version = "1.0.25", optional = true }
serde = { version = "1.0.217", features = ["derive"] }
thiserror = { version = "2.0.11", optional = true }
url = { version = "2.5.4", features = ["serde"] }
urlencoding = { version = "2.1.3", optional = true }
whoami = { version = "1.5.2", optional = true }

# web_server
# ssr
axum = { version = "0.7.9", optional = true }
hyper = { version = "1.5.2", optional = true }
leptos = { version = "0.7.4", default-features = false }
leptos_axum = { version = "0.7.4", optional = true }
leptos_meta = { version = "0.7.4", default-features = false }
leptos_router = { version = "0.7.4", default-features = false }
tower = { version = "0.5.2", optional = true }
tower-http = { version = "0.6.2", optional = true, features = ["fs"] }
tracing = { version = "0.1.41", optional = true }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
clap = { version = "4.5.27", features = ["derive"], optional = true }
tokio = { version = "1.43.0", features = ["rt", "rt-multi-thread", "signal"], optional = true }

[target.'cfg(target_arch = "wasm32")'.dependencies]
console_error_panic_hook = "0.1.7"
console_log = { version = "1.0.0", features = ["color"] }
log = "0.4.25"
serde-wasm-bindgen = "0.6.5"
tokio = "1.43.0"
wasm-bindgen = "0.2.100"
wasm-bindgen-futures = "0.4.50"
js-sys = "0.3.77"
web-sys = "0.3.77"

[features]
default = []

# === envman modes === #
cli = [
    "error_reporting",
    "flow_logic",
    "item_interactions",
    "item_state_example",
    "output_progress",
    "web_server",

    "peace/cli",
]
# The `"ssr"` feature is used for two purposes:
#
# * To enable web server features.
# * Without the `"cli"` feature enabled, that this is a plain web server binary.
#
# The reason we use "ssr" to enable web server features is because:
#
# * we need them enabled when the application is built as a CLI tool with web server capabilities.
# * we need them enabled when the application is built as a plain web server.
# * `cargo-leptos` enables the `"ssr"` feature.
# * proc macros from `leptos` *probably* depend on `#[cfg(feature = "ssr")]`, which don't get
#   enabled when we use `"web_server"` as the web server feature without enabling `"ssr"` as well.
ssr = [
    "flow_logic",
    "dep:axum",
    "dep:hyper",
    "dep:leptos_axum",
    "dep:tokio",
    "dep:tower",
    "dep:tower-http",
    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_router/ssr",
    "peace/webi",
    "peace/ssr",
]
csr = [
    "peace/webi",
]

# === peace passthrough features === #
error_reporting = [
    "peace/error_reporting",
    "peace_items/error_reporting",
]
output_progress = [
    "peace/output_progress",
    "peace_items/output_progress",
]
item_interactions = [
    "peace/item_interactions",
    "peace_items/item_interactions",
]
item_state_example = [
    "peace/item_state_example",
    "peace_items/item_state_example",
]

# === envman low level === #
flow_logic = [
    "dep:aws-config",
    "dep:aws-sdk-iam",
    "dep:aws-sdk-s3",
    "dep:aws-smithy-types",
    "dep:base64",
    "dep:chrono",
    "dep:clap",
    "dep:derivative",
    "dep:futures",
    "dep:md5-rs",
    "dep:semver",
    "dep:thiserror",
    "dep:tokio",
    "dep:urlencoding",
    "dep:whoami",
]

# web related
web_server = [
    "ssr", # leptos generates functions that depend on this feature in the application crate.
]

# leptos csr
hydrate = [
    "dep:tracing",
    "leptos/hydrate",
    "peace/webi",
]

[package.metadata.cargo-all-features]
denylist = ["axum", "tower", "tower-http", "tokio", "leptos_axum"]
skip_feature_sets = [["csr", "ssr"], ["csr", "hydrate"], ["ssr", "hydrate"]]

[package.metadata.leptos]
# See <https://github.com/leptos-rs/cargo-leptos/blob/main/README.md>
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "envman"
# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/web/envman"
# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# The source style file. If it ends with _.sass_ or _.scss_ then it will be compiled by `dart-sass`
# into CSS and processed by lightning css. When release is set, then it will also be minified.
#
# Optional. Env: LEPTOS_STYLE_FILE.
# style-file = "../../target/web/envman/public/css/tailwind.css"
# tailwind-input-file = "src/web/tailwind.css"
# tailwind-config-file = "src/web/tailwind.config.js"

# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
# assets-dir = "assets"
# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:7890"
# The port to use for automatic reload monitoring
reload-port = 7891
# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
# end2end-cmd = "npx playwright test"
# end2end-dir = "end2end"
#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"
# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the head
watch = true
# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"
# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# Whether default features should be enabled when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# Whether default features should be enabled when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false
